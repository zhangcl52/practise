一个典型的动态代理创建对象过程可分为以下四个步骤：
1、通过实现InvocationHandler接口创建自己的调用处理器 InvocationHandler handler = new InvocationHandlerImpl(...);
2、通过为Proxy类指定ClassLoader对象和一组interface创建动态代理类
   Class clazz = Proxy.getProxyClass(classLoader,new Class[]{...});
3、通过反射机制获取动态代理类的构造函数，其参数类型是调用处理器接口类型
    Constructor constructor = clazz.getConstructor(new Class[]{InvocationHandler.class});
4、通过构造函数创建代理类实例，此时需将调用处理器对象作为参数被传入
    Interface Proxy = (Interface)constructor.newInstance(new Object[] (handler));
    生成的ProxySubject继承Proxy类实现Subject接口，实现的Subject的方法实际调用处理器的invoke方法，
    而invoke方法利用反射调用的是被代理对象的的方法（Object result=method.invoke(proxied,args)）

二、美中不足
   1、只能代理实现了某种接口的类
   2、由于生成的代理类都继承了proxy类，而java又具有单继承的特性，这也决定了无法实现对class的动态代理（还不太理解）。


参考：https://blog.csdn.net/ljt2724960661/article/details/52507314
     http://rejoy.iteye.com/blog/1627405
