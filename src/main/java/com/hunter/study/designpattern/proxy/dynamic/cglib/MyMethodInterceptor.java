package com.hunter.study.designpattern.proxy.dynamic.cglib;import org.springframework.cglib.proxy.Enhancer;import org.springframework.cglib.proxy.MethodInterceptor;import org.springframework.cglib.proxy.MethodProxy;import java.lang.reflect.Method;/** * @Author zhangcl * @Date 18/4/24  上午12:53 */public class MyMethodInterceptor implements MethodInterceptor {    public Object target;    public MyMethodInterceptor(Object target){        this.target=target;    }    public Object getProxy(){        Enhancer enhancer=new Enhancer();        enhancer.setSuperclass(target.getClass());        enhancer.setCallback(this);        return enhancer.create();    }    @Override    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {        System.out.println("before do something....");//        method.invoke(target,objects);        methodProxy.invokeSuper(o,objects);        System.out.println("afterf do something....");        return null;    }}