package com.hunter.study.designpattern.proxy.dynamic.cglib2020;import org.springframework.cglib.proxy.Enhancer;import org.springframework.cglib.proxy.MethodInterceptor;import org.springframework.cglib.proxy.MethodProxy;import java.lang.reflect.Method;/** * @Author 水木 * @Date 2020/3/3  10:07 上午 */public class HMethodInterceptor implements MethodInterceptor {    private Object targetObject;    public HMethodInterceptor(Object targetObject) {        this.targetObject = targetObject;    }    public Object getProxy() {        Enhancer enhancer = new Enhancer();        enhancer.setSuperclass(targetObject.getClass());        enhancer.setCallback(this);        return enhancer.create();    }    @Override    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {        System.out.println("before doing something");//        methodProxy.invokeSuper(o, objects);        method.invoke(targetObject, objects);        System.out.println("after doing something");        return null;    }}