package com.hunter.study.designpattern.singleton2020;/** * @Author 水木 * @Date 2020/3/1  8:54 上午 */public class DoubleCheckSingleton {    //必须得加上volatile,才是线程安全。    public static volatile DoubleCheckSingleton doubleCheckSingleton;    private DoubleCheckSingleton() {    }    public static DoubleCheckSingleton getInstance() {        if (doubleCheckSingleton == null) {            synchronized (DoubleCheckSingleton.class) {                if (doubleCheckSingleton == null) {                    //此步骤其实分为3步，1、分配内存空间，2、初始化此对象，3、将引用指向初始化后的对象。                    //由于存在着指令重排序，可能会按1、3、2执行。当3执行后，其实对象还没有初始化完成，                    //此时，如果另一个线程读取到的是doubleCheckSingleton！=null。有可能此时对象还未初始化完成，                    // 所以在实际用这个对象会出错。                    //所以需要在这个变量前加上volatile，防止进行重排序                    doubleCheckSingleton = new DoubleCheckSingleton();                }            }        }        return doubleCheckSingleton;    }}