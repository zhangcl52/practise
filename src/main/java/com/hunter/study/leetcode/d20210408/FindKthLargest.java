package com.hunter.study.leetcode.d20210408;/** * @Author 水木 * @Date 2021/4/8  5:10 下午 */public class FindKthLargest {	public static int findKthLargest(int[] nums, int k) {		if (nums.length == 1 && k == 1) {			return nums[0];		}		//先把数组组装成大根堆(倒着遍历))		for (int i = nums.length - 1; i >= 0; i--) {			heapify(nums, i, nums.length);		}		for (int i = nums.length - 1; i >= 1; i--) {			swap(nums, 0, i);			heapify(nums, 0, i);			if (nums.length - i == k) {				return nums[i];			}		}		return -1;	}	public static void heapify(int[] nums, int index, int heapSize) {		//循环处理，index的值和左右子孩子比较，如果不是最大的，则下沉		int left = index * 2 + 1;		while (left < heapSize) {			int right = left + 1;			int lagestIndex = (right < heapSize && nums[right] > nums[left]) ? right : left;			lagestIndex = nums[index] > nums[lagestIndex] ? index : lagestIndex;			if (lagestIndex == index) {				break;			}			swap(nums, index, lagestIndex);			index = lagestIndex;			left = lagestIndex * 2 + 1;		}	}	public static void swap(int[] nums, int i, int j) {		int temp = nums[i];		nums[i] = nums[j];		nums[j] = temp;	}	public static void main(String[] args) {		int[] arr = new int[]{3, 2, 1, 5, 6, 4};		System.out.println(findKthLargest(arr, 2));	}}