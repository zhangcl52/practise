package com.hunter.study.thread.atomicInteger;import org.junit.Test;import java.util.concurrent.CountDownLatch;import java.util.concurrent.atomic.AtomicInteger;/** * @Author zhangcl * @Date 18/8/31  下午4:48 */public class AtomicIntegerTest {    @Test    public void incrementAndGetTest() throws InterruptedException {        AtomicInteger atomicInteger = new AtomicInteger();        CountDownLatch countDownLatch = new CountDownLatch(10);        for (int i = 0; i <= 9; i++) {            new Thread(() -> {                for (int j = 0; j < 100; j++) {                    System.out.println(atomicInteger.incrementAndGet());                }                countDownLatch.countDown();            }).start();        }        countDownLatch.await();        System.out.println("atomicInteger=" + atomicInteger.get());    }    private static Integer test = 0;    public static void addTest() {        test++;    }    public static void main(String[] args) throws InterruptedException {        CountDownLatch countDownLatch = new CountDownLatch(10);        for (int i = 0; i <= 9; i++) {            new Thread(() -> {                for (int j = 0; j < 1000; j++) {                    addTest();                }                countDownLatch.countDown();            }).start();        }        countDownLatch.await();        System.out.println("test=" + test);    }}