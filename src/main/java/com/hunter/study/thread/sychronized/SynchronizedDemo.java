package com.hunter.study.thread.sychronized;/** * @Author zhangcl * @Date 17/2/7  下午11:03 */public class SynchronizedDemo {    public static void main(String[] args) {        final Demo demo = new Demo();        new Thread(() -> {            demo.insert();        }).start();        new Thread() {            @Override            public void run() {                demo.insert1();            }        }.start();    }}class Demo {    private Object object = new Object();    //获取的是Demo实体的锁    synchronized void insert() {        for (int i = 0; i < 5; i++) {            try {                Thread.sleep(10L);                System.out.println(Thread.currentThread().getThreadGroup() + " insert " + i);            } catch (Exception e) {                e.printStackTrace();            }        }    }    void insert1() {        //获取的是object对象的锁        synchronized (object) {            for (int i = 0; i < 5; i++) {                try {                    Thread.sleep(10L);                    System.out.println(Thread.currentThread().getThreadGroup().getParent() + " insert1 " + i);                } catch (Exception e) {                    e.printStackTrace();                }                //将组内的thread全部打印出来                if (i == 4) {                    Thread.currentThread().getThreadGroup().list();                }            }        }    }}