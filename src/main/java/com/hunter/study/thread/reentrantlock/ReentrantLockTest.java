package com.hunter.study.thread.reentrantlock;import java.math.BigDecimal;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.ReentrantLock;/** * @Author 水木 * @Date 2020/7/17  1:06 下午 */public class ReentrantLockTest {//    public static void main(String[] args) {////        final ReentrantTest test = new ReentrantTest();//        for (int i = 0; i < 10; i++) {//            new Thread(() -> {//            }, i + "").start();//        }//////    }    public static void main(String[] args) {        BigDecimal b =new BigDecimal(0);        System.out.println(BigDecimal.ZERO.equals(b));        System.out.println(BigDecimal.ZERO.compareTo(b));    }}class ReentrantTest {    ReentrantLock lock = new ReentrantLock();    public void M1() throws InterruptedException {        final Condition condition = lock.newCondition();        condition.await();        condition.signal();        System.out.println(String.format("第%s个线程---等待锁", Thread.currentThread().getName()));        lock.lock();        System.out.println(String.format("第%s个线程---获取锁", Thread.currentThread().getName()));        try {            Thread.sleep(2);        } catch (InterruptedException e) {            e.printStackTrace();        } finally {            lock.unlock();        }        System.out.println(String.format("第%s个线程---释放锁", Thread.currentThread().getName()));    }}