package com.hunter.study.zookeeper;import com.hunter.study.common.ZookeeperConstant;import org.apache.curator.framework.CuratorFramework;import org.apache.curator.framework.CuratorFrameworkFactory;import org.apache.curator.retry.ExponentialBackoffRetry;import org.apache.zookeeper.CreateMode;import org.apache.zookeeper.data.Stat;import org.junit.After;import org.junit.Before;import org.junit.Test;import java.util.List;/** * @Author zhangcl * @Date 18/7/25  上午8:57 */public class ZookeeperTest {    private CuratorFramework client = null;    @Before    public void getCuratorClient() {        if (client != null) {            return;        }        client = CuratorFrameworkFactory.builder()                .namespace(ZookeeperConstant.NAMESPACE)                .connectString(ZookeeperConstant.SERVER_LIST)                .sessionTimeoutMs(ZookeeperConstant.SESSION_TIMEOUT_MS)                .connectionTimeoutMs(ZookeeperConstant.CONNECTION_TIMEOUT_MS)                .retryPolicy(new ExponentialBackoffRetry(                        1000, 16, 60000))                .build();        client.start();    }    @After    public void closeClient() {        if (client != null) {            client.close();        }    }    @Test    public void createTest() throws Exception {        client.create().creatingParentsIfNeeded().                withMode(CreateMode.PERSISTENT).                forPath("/test/t1", "zhangcl".getBytes());    }    @Test    public void deleteTest() throws Exception {        client.delete().forPath("/test/t10000000001");    }    @Test    public void getDateTest() throws Exception {        String str = new String(client.getData().forPath("/test/t1"));        System.out.println(str);    }    @Test    public void updateTest() throws Exception {        client.setData().forPath("/test/t1", "zhangcl11".getBytes());    }    /**     * 监听后只能监听一次变更纪录     * @throws Exception     */    @Test    public void watchTest() throws Exception {        String value = new String(client.getData().usingWatcher(                new ZookeeperNodeUpdateWatcher()).forPath("/test/t1"));        client.setData().forPath("/test/t1","zcl".getBytes());        System.out.println("变更后的值："+Thread.currentThread().getName()+"|"+value);    }    @Test    public void childrenTest() throws Exception{        List<String> node=client.getChildren().forPath("/test");        node.forEach(s -> {            System.out.println(s);        });    }    @Test    public void checkExistsTest() throws Exception{        Stat stat = client.checkExists().forPath("/test/t1");        System.out.println(stat.toString());    }}