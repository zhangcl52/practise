package com.hunter.study.zookeeper.lock;import com.google.common.collect.Lists;import org.junit.Test;import java.util.List;import java.util.concurrent.CyclicBarrier;/** * @Author zhangcl * @Date 18/7/27  下午8:04 */public class ZookeeperLockTest {    public static void main(String[] args) {        String path = "resourceName";        int count=10;        CyclicBarrier cyclicBarrier=new CyclicBarrier(count);        for (int i = 0; i < count; i++) {            new Thread(() -> {//                try{//                    cyclicBarrier.await();//                }catch (Exception e){//                    e.printStackTrace();//                }                ZookeeperLock zookeeperLock = new ZookeeperLock();                zookeeperLock.lock(path);                CommonTest.i++;                System.out.println(CommonTest.i);                zookeeperLock.unLock(path);            }).start();        }    }    @Test    public void createThreadTest1() {        List<String> list = Lists.newArrayList();        list.add("1");        Thread t = new Thread() {            @Override            public void run() {                System.out.println(Thread.currentThread().toString() + "," + list.size());            }        };        t.start();    }    @Test    public void createThreadTest2() {        List<String> list = Lists.newArrayList();        list.add("1");        new Thread(new Runnable() {            @Override            public void run() {                System.out.println(Thread.currentThread().toString() + "," + list.size());            }        }).start();    }    @Test    public void createThreadWithLambda1() {        List<String> list = Lists.newArrayList();        list.add("1");        new Thread(() ->                System.out.println(Thread.currentThread().toString() + "," + list.size()))                .start();    }}