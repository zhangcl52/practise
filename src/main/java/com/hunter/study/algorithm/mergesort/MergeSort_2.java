package com.hunter.study.algorithm.mergesort;import java.math.BigDecimal;/** * @Author 水木 * @Date 2021/2/7  6:44 下午 */public class MergeSort_2 {	/**	 * 归并排序	 * 1、将数组分成两部分，左部分排序，右部分排序，进行合并	 * 时间复杂度公式 O(nlogn)	 *	 * @param args	 */	public static void main(String[] args) {//		Integer[] array = new Integer[]{4, 1, 1, 1, 5, 7, 23, 3, 3, 23};////		//调用递归(后两个参数是数组的index)//		process(array, 0, array.length - 1);//		System.out.println(Arrays.toString(array));		BigDecimal bigDecimal1=new BigDecimal("11.2");		BigDecimal bigDecimal2=new BigDecimal("11.2");		bigDecimal1.add(bigDecimal2);		System.out.println(bigDecimal1);	}	/**	 * 递归函数	 *	 * @param arr	 * @param l	 * @param r	 */	public static void process(Integer[] arr, int l, int r) {		if (l == r) {			return;		}		//除以2，获取中间位置的下标		int m = (l + r) >> 1;	}	/**	 * 进行合并	 *	 * @param arr	 * @param l	 * @param m	 */	private static void merge(Integer[] arr, int l, int m, int r) {	}}