package com.hunter.study.algorithm.class03;/** * @Author 水木 * @Date 2021/2/22  5:35 下午 */public class NodeUtils {	/**	 * 将node的值返回(从head 到最后)	 *	 * @param head	 */	public static String nodeToString(Node head) {		StringBuilder stringBuilder = new StringBuilder();		if (head == null) {			return stringBuilder.toString();		}		stringBuilder.append(head.toString()).append(",");		while (head.next != null) {			stringBuilder.append(head.next.toString()).append(",");			head = head.next;		}		return stringBuilder.toString();	}	public static String nodeToString(DoubleNode head) {		StringBuilder stringBuilder = new StringBuilder();		while (head != null) {			stringBuilder.append(head.toString()).append(",");			head = head.next;		}		return stringBuilder.toString();	}	// for test	public static Node generateRandomLinkedList(int len, int value) {		int size = (int) (Math.random() * (len + 1));		if (size == 0) {			return null;		}		size--;		Node<Integer> head = new Node((int) (Math.random() * (value + 1)));		Node pre = head;		while (size != 0) {			Node cur = new Node((int) (Math.random() * (value + 1)));			pre.next = cur;			pre = cur;			size--;		}		return head;	}	public static DoubleNode generateRandomDoubleList(int len, int value) {		int size = (int) (Math.random() * (len + 1));		if (size == 0) {			return null;		}		size--;		DoubleNode<Integer> head = new DoubleNode((int) (Math.random() * (value + 1)));		DoubleNode pre = head;		while (size != 0) {			DoubleNode cur = new DoubleNode((int) (Math.random() * (value + 1)));			pre.next = cur;			cur.pre = pre;			pre = cur;			size--;		}		return head;	}}