package com.hunter.study.algorithm.class03;import org.junit.Test;/** * @Author 水木 * @Date 2021/2/22  5:23 下午 */public class ReverseNodeList {	/**	 * 单链表反转(有点复杂)	 *	 * @param head	 * @return	 */	public static Node reverseNode(Node head) {		if (head == null || head.next == null) {			return head;		}		Node cur = head.next;		Node pre = head;		pre.next = null;		while (cur.next != null) {			Node temp = cur.next;			cur.next = pre;			pre = cur;			cur = temp;		}		cur.next = pre;		return cur;	}	public static Node reverseNode_20210222(Node head) {		if (head == null || head.next == null) {			return head;		}		Node cur = head;		Node pre = null;		while (cur.next != null) {			Node temp = cur.next;			cur.next = pre;			pre = cur;			cur = temp;		}		cur.next = pre;		return cur;	}	public static Node reverseNode_20210223(Node head) {		Node pre = null;		Node next = null;		while (head != null) {			next = head.next;			head.next = pre;			pre = head;			head = next;		}		return pre;	}	@Test	public void reverseNodeTest() {		int max = 100;		for (int i = 0; i < max; i++) {			final Node head = NodeUtils.generateRandomLinkedList(10, 10);			System.out.println("==========测试" + i + "=========");			System.out.println(NodeUtils.nodeToString(head));			System.out.println("修改后");			System.out.println(NodeUtils.nodeToString(reverseNode_20210223(head)));		}	}}