package com.hunter.study.algorithm.basesort;import com.google.common.collect.Lists;import com.hunter.study.algorithm.SortUtil;import org.junit.Test;import java.util.Arrays;import java.util.List;/** * @Author 水木 * @Date 2021/3/4  9:57 下午 */public class QuickSort0406 {	/**	 * 以arr[r]为界，将数组分为两部分，左部分<arr[r]。右部分>arr[r]	 *	 * @param arr	 * @param l	 * @param r   arr[r] 重新排序后，所有的index	 * @return	 */	public int partition(int arr[], int l, int r) {		//处理边界值		if (arr.length == 0) {			return -1;		}		if (l == r) {			return l;		}		int index = l;		int lessThanIndex = l - 1;		while (index < r) {			if (arr[index] <= arr[r]) {				SortUtil.swapInArray(arr, index, ++lessThanIndex);			}			index++;		}		SortUtil.swapInArray(arr, index, ++lessThanIndex);		return lessThanIndex;	}	/**	 * 快排第一版	 *	 * @param arr	 * @return	 */	public void quickSort(int[] arr, int l, int r) {		if (l >= r) {			return;		}		int m = partition(arr, l, r);		quickSort(arr, l, m - 1);		quickSort(arr, m + 1, r);	}	@Test	public void testQuickSort1() {		int max = 100;		for (int i = 0; i < max; i++) {			final int[] before = SortUtil.generateRandomArray(5, 10);			System.out.println("==========第" + i + 1 + "组=========");			System.out.println("before=" + Arrays.toString(before));			//			insertionSort(before);			quickSort(before, 0, before.length - 1);			System.out.println("after=" + Arrays.toString(before));		}////		int[] test=new int[]{2, 3, -5, 4, 0};//		quickSort1(test);	}	public static void main(String[] args) {		List<Integer> ls = Lists.newArrayList();		Integer i = null;		ls.add(i);		ls.forEach(n -> {			System.out.println(n);		});	}}