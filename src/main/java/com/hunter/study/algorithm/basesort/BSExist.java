package com.hunter.study.algorithm.basesort;import com.hunter.study.algorithm.SortUtil;import org.junit.Test;import java.util.Arrays;/** * @Author 水木 * @Date 2021/2/19  5:49 下午 */public class BSExist {	/**	 * 在有序数组中用二分查找某个数	 *	 * @param sortedArr	 * @param num	 * @return	 */	public static boolean bsExist(int[] sortedArr, int num) {		//注意点:提前做判断		if (sortedArr == null || sortedArr.length == 0) {			return false;		}		int l = 0;		int r = sortedArr.length - 1;		int m = 0;		//注意点:l<r才循环		while (l < r) {			if (r - l == 1) {				return sortedArr[l] == num || sortedArr[r] == num;			}			//取中间的值（取值偏左）（0+3）>>1=1			m = r + l >> 1;			if (sortedArr[m] == num) {				return true;			} else if (sortedArr[m] < num) {				//注意点：中间index 可以 +1 或 -1 赋值				l = m + 1;			} else {				r = m - 1;			}		}		//注意点：只有一个值的时候		return sortedArr[l] == num;	}	/**	 * 练习20210220	 * 在有序数组中用二分查找某个数(递归)	 *	 * @param sortedArr	 * @param num	 * @return	 */	public static boolean bsExist_20210220(int[] sortedArr, int l, int r, int num) {		if (sortedArr == null) {			return false;		}		if (r - l <= 1) {			return sortedArr[l] == num || sortedArr[r] == num;		}		if (l < r) {			int m = (l + r) >>> 1;//取靠左的中间值（>>>是无符号右移，>>是带符号右移）			if (num == sortedArr[m]) {				return true;			} else if (num < sortedArr[m]) {				r = m;			} else {				l = m;			}			return bsExist_20210220(sortedArr, l, r, num);		}		return false;	}	/**	 * 练习20210222	 * 在有序数组中用二分查找某个数(while)	 *	 * @param sortedArr	 * @param num	 * @return	 */	public static boolean bsExist_20210222(int[] sortedArr, int num) {		if (sortedArr == null) {			return false;		}		int l = 0;		int r = sortedArr.length - 1;		while (l < r) {			int m = l + ((r - l) >>> 1);//取靠左的中间值（>>>是无符号右移，>>是带符号右移），(r+l)/2 可能会溢出，所以用r-l更安全			if (num == sortedArr[m]) {				return true;			} else if (num < sortedArr[m]) {				r = m - 1;			} else {				l = m + 1;			}		}		return num == sortedArr[l];	}	@Test	public void bsExistTest() {		int maxValue = 5;		int forEachTime = 100;		for (int i = 0; i < forEachTime; i++) {			System.out.println("==========第" + i + "组=========");			final int[] array = SortUtil.generateFixSizeRandomArray(1, maxValue);//			int[] array = {-4, -1, 2, 2};			InsertionSort.insertionSort(array);			int num = (int) ((maxValue + 1) * Math.random()) - (int) (maxValue * Math.random());//			num = 2;			System.out.println("数组为：" + Arrays.toString(array) + "  要查找的值为：" + num);//			System.out.println("结果为：" + bsExist(array, num));			System.out.println("结果为：" + bsExist_20210222(array, num));		}	}}