package com.hunter.study.algorithm.basesort;import com.google.common.collect.Lists;import com.hunter.study.algorithm.SortUtil;import org.junit.Test;import java.util.Arrays;import java.util.List;import java.util.concurrent.TimeUnit;/** * @Author 水木 * @Date 2021/3/4  9:57 下午 */public class QuickSort {	/**	 * 以arr[r]为界，将数组分为两部分，左部分<arr[r]。右部分>arr[r]	 *	 * @param arr	 * @param l	 * @param r   arr[r] 重新排序后，所有的index	 * @return	 */	public int partition1(int arr[], int l, int r) {		//处理边界值		if (arr.length == 0) {			return -1;		}		if (l == r) {			return l;		}		int lastLessIndex = l - 1;		int index = l;		while (index < r) {			if (arr[index] <= arr[r]) {				SortUtil.swapInArray(arr, index, ++lastLessIndex);			}			index++;		}		SortUtil.swapInArray(arr, index, ++lastLessIndex);		return lastLessIndex;	}	/**	 * 快排第一版	 *	 * @param arr	 * @return	 */	public int[] quickSort1(int[] arr) {		if (arr == null || arr.length <= 1) {			return arr;		}		quickSort1(arr, 0, arr.length - 1);		return arr;	}	/**	 * 快排	 *	 * @param arr	 * @param l	 * @param r	 * @return	 */	public void quickSort1(int[] arr, int l, int r) {		if (l >= r) {			return;		}		int m = partition1(arr, l, r);		quickSort1(arr, l, m - 1);		quickSort1(arr, m + 1, r);		return;	}	/**	 * 快排第一版	 *	 * @param arr	 * @return	 */	public int[] quickSort2(int[] arr) {		if (arr == null || arr.length <= 1) {			return arr;		}		quickSort2(arr, 0, arr.length - 1);		return arr;	}	/**	 * 快排2	 *	 * @param arr	 * @param l	 * @param r	 * @return	 */	public void quickSort2(int[] arr, int l, int r) {		if (l >= r) {			return;		}		int m[] = partition2(arr, l, r);		quickSort2(arr, l, m[0] - 1);		quickSort2(arr, m[1] + 1, r);		return;	}	/**	 * 以arr[r]为界，将数组分为两部分，左部分<arr[r]。右部分>arr[r]	 *	 * @param arr	 * @param l	 * @param r   arr[r] 重新排序后，所有的index	 * @return	 */	public int[] partition2(int arr[], int l, int r) {		//处理边界值		if (l > r) {			return new int[]{-1, -1};		}		if (l == r) {			return new int[]{l, l};		}		int firstEqualIndex = l - 1;		int index = l;		int lastEqualIndex = r;		while (index < lastEqualIndex) {			if (arr[index] == arr[r]) {				index++;			} else if (arr[index] < arr[r]) {				SortUtil.swapInArray(arr, index++, ++firstEqualIndex);			} else {				SortUtil.swapInArray(arr, index, --lastEqualIndex);			}		}		SortUtil.swapInArray(arr, r, lastEqualIndex);		return new int[]{firstEqualIndex++, lastEqualIndex};	}	/**	 * 快排第一版	 *	 * @param arr	 * @return	 */	public int[] quickSort3(int[] arr) {		if (arr == null || arr.length <= 1) {			return arr;		}		quickSort3(arr, 0, arr.length - 1);		return arr;	}	/**	 * 快排2	 *	 * @param arr	 * @param l	 * @param r	 * @return	 */	public void quickSort3(int[] arr, int l, int r) {		if (l >= r) {			return;		}		SortUtil.swapInArray(arr, l + (int) (Math.random() * (r - l + 1)), r);		int m[] = partition2(arr, l, r);		quickSort2(arr, l, m[0] - 1);		quickSort2(arr, m[1] + 1, r);		return;	}	@Test	public void testQuickSort1() {		int max = 100;		for (int i = 0; i < max; i++) {			final int[] before = SortUtil.generateRandomArray(5, 10);			System.out.println("==========第" + i + 1 + "组=========");			System.out.println("before=" + Arrays.toString(before));			//			insertionSort(before);			quickSort1(before);			System.out.println("after=" + Arrays.toString(before));		}////		int[] test=new int[]{2, 3, -5, 4, 0};//		quickSort1(test);	}	@Test	public void testQuickSort2() {		int max = 100;		for (int i = 0; i < max; i++) {			final int[] before = SortUtil.generateRandomArray(5, 10);			System.out.println("==========第" + i + 1 + "组=========");			System.out.println("before=" + Arrays.toString(before));			//			insertionSort(before);			quickSort2(before);			System.out.println("after=" + Arrays.toString(before));		}////		int[] test=new int[]{2, 3, -5, 4, 0};//		quickSort1(test);	}	@Test	public void testQuickSort3() {		int max = 100;		for (int i = 0; i < max; i++) {			final int[] before = SortUtil.generateRandomArray(5, 10);			System.out.println("==========第" + i + 1 + "组=========");			System.out.println("before=" + Arrays.toString(before));			//			insertionSort(before);			quickSort3(before);			System.out.println("after=" + Arrays.toString(before));		}////		int[] test=new int[]{2, 3, -5, 4, 0};//		quickSort1(test);	}	public static void main(String[] args) {		List<Integer> ls= Lists.newArrayList();		Integer i=null;		ls.add(i);		ls.forEach(n->{			System.out.println(n);		});		System.out.println(TimeUnit.SECONDS.toNanos(1));	}}