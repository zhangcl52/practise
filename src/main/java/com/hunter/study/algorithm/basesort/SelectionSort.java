package com.hunter.study.algorithm.basesort;import com.hunter.study.algorithm.SortUtil;import org.junit.Test;import java.util.Arrays;/** * @Author 水木 * @Date 2021/2/19  12:47 下午 */public class SelectionSort {	/**	 * 选择排序 时间复杂度O(n^2)  空间复杂度O(1)   无(稳定性)	 *	 * @param arr	 * @return	 */	public static int[] selectionSort(int[] arr) {		if (arr == null) {			return null;		}		for (int i = 0; i < arr.length - 1; i++) {			//查找值最小的index			int minValueIndex = i;			for (int j = i + 1; j < arr.length; j++) {				minValueIndex = arr[minValueIndex] > arr[j] ? j : minValueIndex;			}			//index i和minValueIndex 上的值交换位置			SortUtil.swapInArray(arr, minValueIndex, i);		}		return arr;	}	/**	 * 20200220 练习	 *	 * @param arr	 * @return	 */	public int[] selectionSort_20200220(int[] arr) {		if (arr == null || arr.length == 1) {			return arr;		}		for (int i = 0; i < arr.length; i++) {			int minIndex = i;			for (int j = i + 1; j < arr.length; j++) {				minIndex = arr[minIndex] > arr[j] ? j : minIndex;			}			if (i != minIndex) {				SortUtil.swapInArray(arr, i, minIndex);			}		}		return arr;	}	@Test	public void selectionSortTest() {		int max = 100;		for (int i = 0; i < max; i++) {			final int[] before = SortUtil.generateRandomArray(5, 10);			System.out.println("==========第" + i + 1 + "组=========");			System.out.println("before=" + Arrays.toString(before));//			selectionSort(before);			selectionSort_20200220(before);			System.out.println("after=" + Arrays.toString(before));		}	}}