package com.hunter.study.algorithm.basesort;import java.util.Arrays;/** * @Author 水木 * @Date 2021/2/7  6:44 下午 */public class MergeSort_1 {	/**	 * 归并排序	 * 1、将数组分成两部分，左部分排序，右部分排序，进行合并	 * 时间复杂度公式 O(nlogn)	 *	 * @param args	 */	public static void main(String[] args) {		Integer[] array = new Integer[]{4, 1, 1, 1, 5, 7, 23, 3, 3, 23};		process(array, 0, array.length - 1);		System.out.println(Arrays.toString(array));	}	public static void process(Integer[] arr, int l, int r) {		if (l == r) {			return;		}		int m = (r + l) >> 1;		process(arr, l, m);		process(arr, m + 1, r);		merge(arr, l, m, r);	}	/**	 * 进行合并	 *	 * @param arr	 * @param l	 * @param m	 */	private static void merge(Integer[] arr, int l, int m, int r) {		Integer[] temp = new Integer[arr.length];		int indexL = l;		int indexR = m + 1;		int indexT = l;		System.out.println(String.format("middle=%s", m));		while (indexL <= m && indexR <= r) {			temp[indexT++] = arr[indexL] < arr[indexR] ? arr[indexL++] : arr[indexR++];		}		while (indexL <= m) {			temp[indexT++] = arr[indexL++];		}		while (indexR <= r) {			temp[indexT++] = arr[indexR++];		}		indexT = l;		while (indexT <= r) {			arr[indexT] = temp[indexT];			indexT++;		}	}}